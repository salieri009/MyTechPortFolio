name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AZURE_CONTAINER_REGISTRY: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
  AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
  AZURE_CONTAINER_APP_NAME: ${{ secrets.AZURE_CONTAINER_APP_NAME }}

jobs:
  # Frontend Build and Test
  frontend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests
      run: npm run test:ci
      continue-on-error: true
    
    - name: Build frontend
      run: npm run build
      env:
        VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}
        VITE_GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
        VITE_GA_MEASUREMENT_ID: ${{ secrets.GA_MEASUREMENT_ID }}
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/dist

  # Backend Build and Test
  backend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
    
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Run tests
      run: ./gradlew test
      env:
        SPRING_PROFILES_ACTIVE: test
    
    - name: Build backend
      run: ./gradlew bootJar
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: backend-build
        path: backend/build/libs/*.jar

  # Build and Push Docker Images
  build-and-push:
    needs: [frontend-test, backend-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Login to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.AZURE_CONTAINER_REGISTRY }}
        username: ${{ secrets.AZURE_ACR_USERNAME }}
        password: ${{ secrets.AZURE_ACR_PASSWORD }}
    
    - name: Build and push backend image
      run: |
        docker build -t ${{ env.AZURE_CONTAINER_REGISTRY }}/portfolio-backend:${{ github.sha }} -t ${{ env.AZURE_CONTAINER_REGISTRY }}/portfolio-backend:latest ./backend
        docker push ${{ env.AZURE_CONTAINER_REGISTRY }}/portfolio-backend:${{ github.sha }}
        docker push ${{ env.AZURE_CONTAINER_REGISTRY }}/portfolio-backend:latest
    
    - name: Build and push frontend image
      run: |
        docker build -t ${{ env.AZURE_CONTAINER_REGISTRY }}/portfolio-frontend:${{ github.sha }} -t ${{ env.AZURE_CONTAINER_REGISTRY }}/portfolio-frontend:latest ./frontend \
          --build-arg VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL }} \
          --build-arg VITE_GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }} \
          --build-arg VITE_GA_MEASUREMENT_ID=${{ secrets.GA_MEASUREMENT_ID }}
        docker push ${{ env.AZURE_CONTAINER_REGISTRY }}/portfolio-frontend:${{ github.sha }}
        docker push ${{ env.AZURE_CONTAINER_REGISTRY }}/portfolio-frontend:latest

  # Deploy to Azure Container Apps
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Deploy to Azure Container Apps
      uses: azure/container-apps-deploy-action@v1
      with:
        containerAppName: ${{ env.AZURE_CONTAINER_APP_NAME }}
        resourceGroup: ${{ env.AZURE_RESOURCE_GROUP }}
        imageToDeploy: ${{ env.AZURE_CONTAINER_REGISTRY }}/portfolio-backend:${{ github.sha }}
        environmentVariables: |
          MONGODB_URI=secretref:mongodb-uri
          GOOGLE_CLIENT_ID=secretref:google-client-id
          GOOGLE_CLIENT_SECRET=secretref:google-client-secret
          JWT_SECRET=secretref:jwt-secret

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
